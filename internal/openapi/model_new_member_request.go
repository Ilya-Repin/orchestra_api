/*
Orchestra API

Микросервис API для \"Клуба друзей оркестра\". **Все пользователи считаются равными**, а доступ из внешнего мира осуществляется через Telegram-бот.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewMemberRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewMemberRequest{}

// NewMemberRequest struct for NewMemberRequest
type NewMemberRequest struct {
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	Phone    string `json:"phone" validate:"regexp=^7\\\\\\\\d{10}$"`
}

type _NewMemberRequest NewMemberRequest

// NewNewMemberRequest instantiates a new NewMemberRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewMemberRequest(fullName string, email string, phone string) *NewMemberRequest {
	this := NewMemberRequest{}
	this.FullName = fullName
	this.Email = email
	this.Phone = phone
	return &this
}

// NewNewMemberRequestWithDefaults instantiates a new NewMemberRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewMemberRequestWithDefaults() *NewMemberRequest {
	this := NewMemberRequest{}
	return &this
}

// GetFullName returns the FullName field value
func (o *NewMemberRequest) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *NewMemberRequest) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *NewMemberRequest) SetFullName(v string) {
	o.FullName = v
}

// GetEmail returns the Email field value
func (o *NewMemberRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *NewMemberRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *NewMemberRequest) SetEmail(v string) {
	o.Email = v
}

// GetPhone returns the Phone field value
func (o *NewMemberRequest) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *NewMemberRequest) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *NewMemberRequest) SetPhone(v string) {
	o.Phone = v
}

func (o NewMemberRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewMemberRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["full_name"] = o.FullName
	toSerialize["email"] = o.Email
	toSerialize["phone"] = o.Phone
	return toSerialize, nil
}

func (o *NewMemberRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"full_name",
		"email",
		"phone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewMemberRequest := _NewMemberRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewMemberRequest)

	if err != nil {
		return err
	}

	*o = NewMemberRequest(varNewMemberRequest)

	return err
}

type NullableNewMemberRequest struct {
	value *NewMemberRequest
	isSet bool
}

func (v NullableNewMemberRequest) Get() *NewMemberRequest {
	return v.value
}

func (v *NullableNewMemberRequest) Set(val *NewMemberRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNewMemberRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNewMemberRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewMemberRequest(val *NewMemberRequest) *NullableNewMemberRequest {
	return &NullableNewMemberRequest{value: val, isSet: true}
}

func (v NullableNewMemberRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewMemberRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
