/*
Orchestra API

Микросервис API для \"Клуба друзей оркестра\". **Все пользователи считаются равными**, а доступ из внешнего мира осуществляется через Telegram-бот.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NewLocationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewLocationRequest{}

// NewLocationRequest struct for NewLocationRequest
type NewLocationRequest struct {
	Name     string  `json:"name"`
	Route    string  `json:"route"`
	Features *string `json:"features,omitempty"`
}

type _NewLocationRequest NewLocationRequest

// NewNewLocationRequest instantiates a new NewLocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewLocationRequest(name string, route string) *NewLocationRequest {
	this := NewLocationRequest{}
	this.Name = name
	this.Route = route
	return &this
}

// NewNewLocationRequestWithDefaults instantiates a new NewLocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewLocationRequestWithDefaults() *NewLocationRequest {
	this := NewLocationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *NewLocationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewLocationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewLocationRequest) SetName(v string) {
	o.Name = v
}

// GetRoute returns the Route field value
func (o *NewLocationRequest) GetRoute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Route
}

// GetRouteOk returns a tuple with the Route field value
// and a boolean to check if the value has been set.
func (o *NewLocationRequest) GetRouteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Route, true
}

// SetRoute sets field value
func (o *NewLocationRequest) SetRoute(v string) {
	o.Route = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *NewLocationRequest) GetFeatures() string {
	if o == nil || IsNil(o.Features) {
		var ret string
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewLocationRequest) GetFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *NewLocationRequest) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given string and assigns it to the Features field.
func (o *NewLocationRequest) SetFeatures(v string) {
	o.Features = &v
}

func (o NewLocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewLocationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["route"] = o.Route
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	return toSerialize, nil
}

func (o *NewLocationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"route",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewLocationRequest := _NewLocationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewLocationRequest)

	if err != nil {
		return err
	}

	*o = NewLocationRequest(varNewLocationRequest)

	return err
}

type NullableNewLocationRequest struct {
	value *NewLocationRequest
	isSet bool
}

func (v NullableNewLocationRequest) Get() *NewLocationRequest {
	return v.value
}

func (v *NullableNewLocationRequest) Set(val *NewLocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNewLocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNewLocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewLocationRequest(val *NewLocationRequest) *NullableNewLocationRequest {
	return &NullableNewLocationRequest{value: val, isSet: true}
}

func (v NullableNewLocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewLocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
