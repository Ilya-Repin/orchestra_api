/*
Orchestra API

Микросервис API для \"Клуба друзей оркестра\". **Все пользователи считаются равными**, а доступ из внешнего мира осуществляется через Telegram-бот.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the NewEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewEventRequest{}

// NewEventRequest struct for NewEventRequest
type NewEventRequest struct {
	Title       string    `json:"title"`
	Description *string   `json:"description,omitempty"`
	EventType   int32     `json:"event_type"`
	EventDate   time.Time `json:"event_date"`
	Location    int32     `json:"location"`
	Capacity    int32     `json:"capacity"`
}

type _NewEventRequest NewEventRequest

// NewNewEventRequest instantiates a new NewEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewEventRequest(title string, eventType int32, eventDate time.Time, location int32, capacity int32) *NewEventRequest {
	this := NewEventRequest{}
	this.Title = title
	this.EventType = eventType
	this.EventDate = eventDate
	this.Location = location
	this.Capacity = capacity
	return &this
}

// NewNewEventRequestWithDefaults instantiates a new NewEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewEventRequestWithDefaults() *NewEventRequest {
	this := NewEventRequest{}
	return &this
}

// GetTitle returns the Title field value
func (o *NewEventRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *NewEventRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *NewEventRequest) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NewEventRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewEventRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NewEventRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NewEventRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEventType returns the EventType field value
func (o *NewEventRequest) GetEventType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *NewEventRequest) GetEventTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *NewEventRequest) SetEventType(v int32) {
	o.EventType = v
}

// GetEventDate returns the EventDate field value
func (o *NewEventRequest) GetEventDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventDate
}

// GetEventDateOk returns a tuple with the EventDate field value
// and a boolean to check if the value has been set.
func (o *NewEventRequest) GetEventDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventDate, true
}

// SetEventDate sets field value
func (o *NewEventRequest) SetEventDate(v time.Time) {
	o.EventDate = v
}

// GetLocation returns the Location field value
func (o *NewEventRequest) GetLocation() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *NewEventRequest) GetLocationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *NewEventRequest) SetLocation(v int32) {
	o.Location = v
}

// GetCapacity returns the Capacity field value
func (o *NewEventRequest) GetCapacity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *NewEventRequest) GetCapacityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *NewEventRequest) SetCapacity(v int32) {
	o.Capacity = v
}

func (o NewEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["event_type"] = o.EventType
	toSerialize["event_date"] = o.EventDate
	toSerialize["location"] = o.Location
	toSerialize["capacity"] = o.Capacity
	return toSerialize, nil
}

func (o *NewEventRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"event_type",
		"event_date",
		"location",
		"capacity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewEventRequest := _NewEventRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewEventRequest)

	if err != nil {
		return err
	}

	*o = NewEventRequest(varNewEventRequest)

	return err
}

type NullableNewEventRequest struct {
	value *NewEventRequest
	isSet bool
}

func (v NullableNewEventRequest) Get() *NewEventRequest {
	return v.value
}

func (v *NullableNewEventRequest) Set(val *NewEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNewEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNewEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewEventRequest(val *NewEventRequest) *NullableNewEventRequest {
	return &NullableNewEventRequest{value: val, isSet: true}
}

func (v NullableNewEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
